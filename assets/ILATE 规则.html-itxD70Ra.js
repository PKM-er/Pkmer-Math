import{_ as a,c as n,b as t,o as m}from"./app-DAsvLVjU.js";const p={};function e(i,s){return m(),n("div",null,[...s[0]||(s[0]=[t('<p>分部积分中, 在选择哪个函数作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span> 时, 有一个被广泛使用的经验法则, 称为 <strong>ILATE 规则</strong>. 该规则为选择 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span> 的函数类型设定了优先级, 排在前面的函数求导后形式会变得更简单 (变为代数式) , 而排在后面的函数 (如指数, 三角函数) 积分后形式依然简单且可控.</p><ul><li><strong>I (Inverse trigonometric)</strong> - 反三角函数: 如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>arcsin</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>arctan</mi><mo>⁡</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\\arcsin x, \\arctan x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8623em;vertical-align:-0.1944em;"></span><span class="mop">arcsin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">arctan</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span></span></span></span></li><li><strong>L (Logarithmic)</strong> - 对数函数: 如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ln</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>b</mi></msub><mi>x</mi></mrow><annotation encoding="application/x-tex">\\ln x, \\log_b x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.242em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span></span></span></span></li><li><strong>A (Algebraic)</strong> - 代数函数: 如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo separator="true">,</mo><mn>3</mn><mi>x</mi><mo>+</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">x^2, 3x+7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">7</span></span></span></span></li><li><strong>T (Trigonometric)</strong> - 三角函数: 如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>sin</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>cos</mi><mo>⁡</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\\sin x, \\cos x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8623em;vertical-align:-0.1944em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span></span></span></span></li><li><strong>E (Exponential)</strong> - 指数函数: 如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mi>x</mi></msup><mo separator="true">,</mo><msup><mn>2</mn><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">e^x, 2^x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8588em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span></li></ul><p><strong>应用规则</strong><br> 在被积函数中, 按照 <strong>I → L → A → T → E</strong> 的顺序, 排在前面的函数类型优先被选为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span>. 剩余的部分则为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>v</mi></mrow><annotation encoding="application/x-tex">dv</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span>.</p>',3)])])}const r=a(p,[["render",e]]),o=JSON.parse('{"path":"/%E5%BE%AE%E7%A7%AF%E5%88%86/%E7%A7%AF%E5%88%86/ILATE%20%E8%A7%84%E5%88%99.html","title":"ILATE 规则","lang":"zh-CN","frontmatter":{"tags":["数学"],"dlink":["[[分部积分法]]","[[第一类换元法]]"],"description":"分部积分中, 在选择哪个函数作 u 时, 有一个被广泛使用的经验法则, 称为 ILATE 规则. 该规则为选择 u 的函数类型设定了优先级, 排在前面的函数求导后形式会变得更简单 (变为代数式) , 而排在后面的函数 (如指数, 三角函数) 积分后形式依然简单且可控. I (Inverse trigonometric) - 反三角函数: 如 arcsi...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://PKM-er.github.io/Pkmer-Math/%E5%BE%AE%E7%A7%AF%E5%88%86/%E7%A7%AF%E5%88%86/ILATE%20%E8%A7%84%E5%88%99.html"}],["meta",{"property":"og:site_name","content":"Pkmer-Math"}],["meta",{"property":"og:description","content":"分部积分中, 在选择哪个函数作 u 时, 有一个被广泛使用的经验法则, 称为 ILATE 规则. 该规则为选择 u 的函数类型设定了优先级, 排在前面的函数求导后形式会变得更简单 (变为代数式) , 而排在后面的函数 (如指数, 三角函数) 积分后形式依然简单且可控. I (Inverse trigonometric) - 反三角函数: 如 arcsi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"数学"}]],"tag":["数学"]},"git":{},"readingTime":{"minutes":0.73,"words":220},"filePathRelative":"微积分/积分/ILATE 规则.md","excerpt":"<p>分部积分中, 在选择哪个函数作 <span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\\"application/x-tex\\">u</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.4306em;\\"></span><span class=\\"mord mathnormal\\">u</span></span></span></span> 时, 有一个被广泛使用的经验法则, 称为 <strong>ILATE 规则</strong>. 该规则为选择 <span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\\"application/x-tex\\">u</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.4306em;\\"></span><span class=\\"mord mathnormal\\">u</span></span></span></span> 的函数类型设定了优先级, 排在前面的函数求导后形式会变得更简单 (变为代数式) , 而排在后面的函数 (如指数, 三角函数) 积分后形式依然简单且可控.</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"分部积分法","link":"微积分/积分/分部积分法.html"}],"localMap":{"nodes":[{"id":"微积分/积分/ILATE 规则.md","value":{"title":"ILATE 规则","path":"微积分/积分/ILATE 规则.md","outlink":[],"backlink":["微积分/积分/分部积分法.md"]}},{"id":"微积分/积分/分部积分法.md","value":{"title":"分部积分法","path":"微积分/积分/分部积分法.md","outlink":[],"backlink":[]}}],"links":[{"source":"微积分/积分/分部积分法.md","target":"微积分/积分/ILATE 规则.md"}]}}}');export{r as comp,o as data};
