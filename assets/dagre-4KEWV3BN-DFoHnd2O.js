import{f as M}from"./chunk-FASC7IG4-BV3an8v0.js";import{m as J}from"./chunk-ZN7TASNU-Dy7WTfGu.js";import{m as w,bv as j,bw as Y,bx as $,by as H,t as a,h as _,bz as z,bA as K,be as Q,bB as W,bj as Z,bf as D,bd as q,bC as U,bD as V}from"./mermaid.esm.min-lI-Quhr7.js";import{s as S,_ as ee,J as P}from"./chunk-5ZJXQJOJ-CHnGyfP4.js";import"./app-DNyY-c9s.js";function X(e){var n={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:k(e),edges:G(e)};return S(e.graph())||(n.value=ee(e.graph())),n}w(X,"write");function k(e){return P(e.nodes(),function(n){var r=e.node(n),d=e.parent(n),l={v:n};return S(r)||(l.value=r),S(d)||(l.parent=d),l})}w(k,"writeNodes");function G(e){return P(e.edges(),function(n){var r=e.edge(n),d={v:n.v,w:n.w};return S(n.name)||(d.name=n.name),S(r)||(d.value=r),d})}w(G,"writeEdges");var c=new Map,E=new Map,B=new Map,re=w(()=>{E.clear(),B.clear(),c.clear()},"clear"),I=w((e,n)=>{let r=E.get(n)||[];return a.trace("In isDescendant",n," ",e," = ",r.includes(e)),r.includes(e)},"isDescendant"),ne=w((e,n)=>{let r=E.get(n)||[];return a.info("Descendants of ",n," is ",r),a.info("Edge is ",e),e.v===n||e.w===n?!1:r?r.includes(e.v)||I(e.v,n)||I(e.w,n)||r.includes(e.w):(a.debug("Tilt, ",n,",not in descendants"),!1)},"edgeInCluster"),A=w((e,n,r,d)=>{a.warn("Copying children of ",e,"root",d,"data",n.node(e),d);let l=n.children(e)||[];e!==d&&l.push(e),a.warn("Copying (nodes) clusterId",e,"nodes",l),l.forEach(o=>{if(n.children(o).length>0)A(o,n,r,d);else{let i=n.node(o);a.info("cp ",o," to ",d," with parent ",e),r.setNode(o,i),d!==n.parent(o)&&(a.warn("Setting parent",o,n.parent(o)),r.setParent(o,n.parent(o))),e!==d&&o!==e?(a.debug("Setting parent",o,e),r.setParent(o,e)):(a.info("In copy ",e,"root",d,"data",n.node(e),d),a.debug("Not Setting parent for node=",o,"cluster!==rootId",e!==d,"node!==clusterId",o!==e));let s=n.edges(o);a.debug("Copying Edges",s),s.forEach(u=>{a.info("Edge",u);let b=n.edge(u.v,u.w,u.name);a.info("Edge data",b,d);try{ne(u,d)?(a.info("Copying as ",u.v,u.w,b,u.name),r.setEdge(u.v,u.w,b,u.name),a.info("newGraph edges ",r.edges(),r.edge(r.edges()[0]))):a.info("Skipping copy of edge ",u.v,"-->",u.w," rootId: ",d," clusterId:",e)}catch(N){a.error(N)}})}a.debug("Removing node",o),n.removeNode(o)})},"copy"),T=w((e,n)=>{let r=n.children(e),d=[...r];for(let l of r)B.set(l,e),d=[...d,...T(l,n)];return d},"extractDescendants"),te=w((e,n,r)=>{let d=e.edges().filter(s=>s.v===n||s.w===n),l=e.edges().filter(s=>s.v===r||s.w===r),o=d.map(s=>({v:s.v===n?r:s.v,w:s.w===n?n:s.w})),i=l.map(s=>({v:s.v,w:s.w}));return o.filter(s=>i.some(u=>s.v===u.v&&s.w===u.w))},"findCommonEdges"),x=w((e,n,r)=>{let d=n.children(e);if(a.trace("Searching children of id ",e,d),d.length<1)return e;let l;for(let o of d){let i=x(o,n,r),s=te(n,r,i);if(i)if(s.length>0)l=i;else return i}return l},"findNonClusterChild"),O=w(e=>!c.has(e)||!c.get(e).externalConnections?e:c.has(e)?c.get(e).id:e,"getAnchorId"),ae=w((e,n)=>{if(!e||n>10){a.debug("Opting out, no graph ");return}else a.debug("Opting in, graph ");e.nodes().forEach(function(r){e.children(r).length>0&&(a.warn("Cluster identified",r," Replacement id in edges: ",x(r,e,r)),E.set(r,T(r,e)),c.set(r,{id:x(r,e,r),clusterData:e.node(r)}))}),e.nodes().forEach(function(r){let d=e.children(r),l=e.edges();d.length>0?(a.debug("Cluster identified",r,E),l.forEach(o=>{let i=I(o.v,r),s=I(o.w,r);i^s&&(a.warn("Edge: ",o," leaves cluster ",r),a.warn("Descendants of XXX ",r,": ",E.get(r)),c.get(r).externalConnections=!0)})):a.debug("Not a cluster ",r,E)});for(let r of c.keys()){let d=c.get(r).id,l=e.parent(d);l!==r&&c.has(l)&&!c.get(l).externalConnections&&(c.get(r).id=l)}e.edges().forEach(function(r){let d=e.edge(r);a.warn("Edge "+r.v+" -> "+r.w+": "+JSON.stringify(r)),a.warn("Edge "+r.v+" -> "+r.w+": "+JSON.stringify(e.edge(r)));let l=r.v,o=r.w;if(a.warn("Fix XXX",c,"ids:",r.v,r.w,"Translating: ",c.get(r.v)," --- ",c.get(r.w)),c.get(r.v)||c.get(r.w)){if(a.warn("Fixing and trying - removing XXX",r.v,r.w,r.name),l=O(r.v),o=O(r.w),e.removeEdge(r.v,r.w,r.name),l!==r.v){let i=e.parent(l);c.get(i).externalConnections=!0,d.fromCluster=r.v}if(o!==r.w){let i=e.parent(o);c.get(i).externalConnections=!0,d.toCluster=r.w}a.warn("Fix Replacing with XXX",l,o,r.name),e.setEdge(l,o,d,r.name)}}),a.warn("Adjusted Graph",X(e)),R(e,0),a.trace(c)},"adjustClustersAndEdges"),R=w((e,n)=>{var l,o;if(a.warn("extractor - ",n,X(e),e.children("D")),n>10){a.error("Bailing out");return}let r=e.nodes(),d=!1;for(let i of r){let s=e.children(i);d=d||s.length>0}if(!d){a.debug("Done, no node has children",e.nodes());return}a.debug("Nodes = ",r,n);for(let i of r)if(a.debug("Extracting node",i,c,c.has(i)&&!c.get(i).externalConnections,!e.parent(i),e.node(i),e.children("D")," Depth ",n),!c.has(i))a.debug("Not a cluster",i,n);else if(!c.get(i).externalConnections&&e.children(i)&&e.children(i).length>0){a.warn("Cluster without external connections, without a parent and with children",i,n);let s=e.graph().rankdir==="TB"?"LR":"TB";(o=(l=c.get(i))==null?void 0:l.clusterData)!=null&&o.dir&&(s=c.get(i).clusterData.dir,a.warn("Fixing dir",c.get(i).clusterData.dir,s));let u=new J({multigraph:!0,compound:!0}).setGraph({rankdir:s,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}});a.warn("Old graph before copy",X(e)),A(i,e,u,i),e.setNode(i,{clusterNode:!0,id:i,clusterData:c.get(i).clusterData,label:c.get(i).label,graph:u}),a.warn("New graph after copy node: (",i,")",X(u)),a.debug("Old graph after copy",X(e))}else a.warn("Cluster ** ",i," **not meeting the criteria !externalConnections:",!c.get(i).externalConnections," no parent: ",!e.parent(i)," children ",e.children(i)&&e.children(i).length>0,e.children("D"),n),a.debug(c);r=e.nodes(),a.warn("New list of nodes",r);for(let i of r){let s=e.node(i);a.warn(" Now next level",i,s),s!=null&&s.clusterNode&&R(s.graph,n+1)}},"extractor"),L=w((e,n)=>{if(n.length===0)return[];let r=Object.assign([],n);return n.forEach(d=>{let l=e.children(d),o=L(e,l);r=[...r,...o]}),r},"sorter"),ie=w(e=>L(e,e.children()),"sortNodesByHierarchy"),F=w(async(e,n,r,d,l,o)=>{a.warn("Graph in recursive render:XAX",X(n),l);let i=n.graph().rankdir;a.trace("Dir in recursive render - dir:",i);let s=e.insert("g").attr("class","root");n.nodes()?a.info("Recursive render XXX",n.nodes()):a.info("No nodes found for",n),n.edges().length>0&&a.info("Recursive edges",n.edge(n.edges()[0]));let u=s.insert("g").attr("class","clusters"),b=s.insert("g").attr("class","edgePaths"),N=s.insert("g").attr("class","edgeLabels"),h=s.insert("g").attr("class","nodes");await Promise.all(n.nodes().map(async function(g){let t=n.node(g);if(l!==void 0){let f=JSON.parse(JSON.stringify(l.clusterData));a.trace(`Setting data for parent cluster XXX
 Node.id = `,g,`
 data=`,f.height,`
Parent cluster`,l.height),n.setNode(l.id,f),n.parent(g)||(a.trace("Setting parent",g,l.id),n.setParent(g,l.id,f))}if(a.info("(Insert) Node XXX"+g+": "+JSON.stringify(n.node(g))),t==null?void 0:t.clusterNode){a.info("Cluster identified XBX",g,t.width,n.node(g));let{ranksep:f,nodesep:v}=n.graph();t.graph.setGraph({...t.graph.graph(),ranksep:f+25,nodesep:v});let m=await F(h,t.graph,r,d,n.node(g),o),C=m.elem;z(t,C),t.diff=m.diff||0,a.info("New compound node after recursive render XAX",g,"width",t.width,"height",t.height),K(C,t)}else n.children(g).length>0?(a.trace("Cluster - the non recursive path XBX",g,t.id,t,t.width,"Graph:",n),a.trace(x(t.id,n)),c.set(t.id,{id:x(t.id,n),node:t})):(a.trace("Node - the non recursive path XAX",g,h,n.node(g),i),await Q(h,n.node(g),{config:o,dir:i}))})),await w(async()=>{let g=n.edges().map(async function(t){let f=n.edge(t.v,t.w,t.name);a.info("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(t)),a.info("Edge "+t.v+" -> "+t.w+": ",t," ",JSON.stringify(n.edge(t))),a.info("Fix",c,"ids:",t.v,t.w,"Translating: ",c.get(t.v),c.get(t.w)),await W(N,f)});await Promise.all(g)},"processEdges")(),a.info("Graph before layout:",JSON.stringify(X(n))),a.info("############################################# XXX"),a.info("###                Layout                 ### XXX"),a.info("############################################# XXX"),M(n),a.info("Graph after layout:",JSON.stringify(X(n)));let p=0,{subGraphTitleTotalMargin:y}=Z(o);return await Promise.all(ie(n).map(async function(g){var f;let t=n.node(g);if(a.info("Position XBX => "+g+": ("+t.x,","+t.y,") width: ",t.width," height: ",t.height),t==null?void 0:t.clusterNode)t.y+=y,a.info("A tainted cluster node XBX1",g,t.id,t.width,t.height,t.x,t.y,n.parent(g)),c.get(t.id).node=t,D(t);else if(n.children(g).length>0){a.info("A pure cluster node XBX1",g,t.id,t.x,t.y,t.width,t.height,n.parent(g)),t.height+=y,n.node(t.parentId);let v=(t==null?void 0:t.padding)/2||0,m=((f=t==null?void 0:t.labelBBox)==null?void 0:f.height)||0,C=m-v||0;a.debug("OffsetY",C,"labelHeight",m,"halfPadding",v),await q(u,t),c.get(t.id).node=t}else{let v=n.node(t.parentId);t.y+=y/2,a.info("A regular node XBX1 - using the padding",t.id,"parent",t.parentId,t.width,t.height,t.x,t.y,"offsetY",t.offsetY,"parent",v,v==null?void 0:v.offsetY,t),D(t)}})),n.edges().forEach(function(g){let t=n.edge(g);a.info("Edge "+g.v+" -> "+g.w+": "+JSON.stringify(t),t),t.points.forEach(C=>C.y+=y/2);let f=n.node(g.v);var v=n.node(g.w);let m=U(b,t,c,r,f,v,d);V(t,m)}),n.nodes().forEach(function(g){let t=n.node(g);a.info(g,t.type,t.diff),t.isGroup&&(p=t.diff)}),a.warn("Returning from recursive render XAX",s,p),{elem:s,diff:p}},"recursiveRender"),ce=w(async(e,n)=>{var o,i,s,u,b,N;let r=new J({multigraph:!0,compound:!0}).setGraph({rankdir:e.direction,nodesep:((o=e.config)==null?void 0:o.nodeSpacing)||((s=(i=e.config)==null?void 0:i.flowchart)==null?void 0:s.nodeSpacing)||e.nodeSpacing,ranksep:((u=e.config)==null?void 0:u.rankSpacing)||((N=(b=e.config)==null?void 0:b.flowchart)==null?void 0:N.rankSpacing)||e.rankSpacing,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}}),d=n.select("g");j(d,e.markers,e.type,e.diagramId),Y(),$(),H(),re(),e.nodes.forEach(h=>{r.setNode(h.id,{...h}),h.parentId&&r.setParent(h.id,h.parentId)}),a.debug("Edges:",e.edges),e.edges.forEach(h=>{if(h.start===h.end){let p=h.start,y=p+"---"+p+"---1",g=p+"---"+p+"---2",t=r.node(p);r.setNode(y,{domId:y,id:y,parentId:t.parentId,labelStyle:"",label:"",padding:0,shape:"labelRect",style:"",width:10,height:10}),r.setParent(y,t.parentId),r.setNode(g,{domId:g,id:g,parentId:t.parentId,labelStyle:"",padding:0,shape:"labelRect",label:"",style:"",width:10,height:10}),r.setParent(g,t.parentId);let f=structuredClone(h),v=structuredClone(h),m=structuredClone(h);f.label="",f.arrowTypeEnd="none",f.id=p+"-cyclic-special-1",v.arrowTypeStart="none",v.arrowTypeEnd="none",v.id=p+"-cyclic-special-mid",m.label="",t.isGroup&&(f.fromCluster=p,m.toCluster=p),m.id=p+"-cyclic-special-2",m.arrowTypeStart="none",r.setEdge(p,y,f,p+"-cyclic-special-0"),r.setEdge(y,g,v,p+"-cyclic-special-1"),r.setEdge(g,p,m,p+"-cyc<lic-special-2")}else r.setEdge(h.start,h.end,{...h},h.id)}),a.warn("Graph at first:",JSON.stringify(X(r))),ae(r),a.warn("Graph after XAX:",JSON.stringify(X(r)));let l=_();await F(d,r,e.type,e.diagramId,void 0,l)},"render");export{ce as render};
